#include <iostream>
#include <omp.h>
#include <stdio.h>
#include <vector>

using namespace std;

class OperacionesMatriciales
{
private:
    vector<vector<vector<int>>> matrices;

public:

    void crearMatrizAleatoriaOpenMP()
    {
        vector<vector<int>> nMatriz (12, vector<int>(12,0));

        #pragma omp parallel for schedule(static, 10)
        for(int i = 0; i < 12; i ++)
        {
            for(int j = 0; j < 12; j++)
            {
                nMatriz[i][j] = rand() % 144;
            }
        }

        matrices.push_back(nMatriz);

        int cont = 0;
        for(int i = 0; i < 12; i ++)
        {
            for(int j = 0; j < 12; j++)
            {
                cont++;
            }
        }
        printf("Matriz creada con : %i elementos\n",cont);
    }


    void sumarMatricesOpenMP()
    {
        #pragma omp parallel
        {

        }
    }
};

int main()
{
    OperacionesMatriciales m;

    double inicial = omp_get_wtime();
    m.crearMatrizAleatoriaOpenMP();
    double fin = omp_get_wtime();
    double dif = fin - inicial;
    printf("En %.7f segundos\n",dif);
}
